{"version":3,"sources":["img/cards/clubs/ten.svg","img/cards/clubs/ace.svg","img/cards/clubs/king.svg","img/cards/clubs/queen.svg","img/cards/clubs/jack.svg","img/cards/clubs/nine.svg","img/cards/clubs/eight.svg","img/cards/clubs/seven.svg","img/cards/diamonds/ten.svg","img/cards/diamonds/ace.svg","img/cards/diamonds/king.svg","img/cards/diamonds/queen.svg","img/cards/diamonds/jack.svg","img/cards/diamonds/nine.svg","img/cards/diamonds/eight.svg","img/cards/diamonds/seven.svg","img/cards/hearts/ten.svg","img/cards/hearts/ace.svg","img/cards/hearts/king.svg","img/cards/hearts/queen.svg","img/cards/hearts/jack.svg","img/cards/hearts/nine.svg","img/cards/hearts/eight.svg","img/cards/hearts/seven.svg","img/cards/spades/ten.svg","img/cards/spades/ace.svg","img/cards/spades/king.svg","img/cards/spades/queen.svg","img/cards/spades/jack.svg","img/cards/spades/nine.svg","img/cards/spades/eight.svg","img/cards/spades/seven.svg","img/cards/back.svg","types.ts","utils/index.ts","constants.ts","components/PlayingCard.tsx","components/PlayingCards.tsx","components/PlayingTable.tsx","components/PlayingSpace.tsx","components/PlayingDeck.tsx","components/CardSelection.tsx","components/PlayersNames.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Status","getPlayerName","names","playerId","botPlayerId","length","getCardLabelCommon","card","rank","suit","getCardLabelDeck","index","cardLabel","getCardLabel","PlayingCard","props","className","onClick","img","Ten","CardRank","Ace","King","Queen","Jack","Nine","Eight","Seven","Clubs","CardSuit","Diamonds","Hearts","Spades","CardBack","TenClubs","AceClubs","KingClubs","QueenClubs","JackClubs","NineClubs","EightClubs","SevenClubs","TenDiamonds","AceDiamonds","KingDiamonds","QueenDiamonds","JackDiamonds","NineDiamonds","EightDiamonds","SevenDiamonds","TenHearts","AceHearts","KingHearts","QueenHearts","JackHearts","NineHearts","EightHearts","SevenHearts","TenSpades","AceSpades","KingSpades","QueenSpades","JackSpades","NineSpades","EightSpades","SevenSpades","getCardImg","alt","classImg","classnames","src","PlayingCards","cards","displayMode","displayCards","map","c","key","PlayingTable","PlayingSpace","horizontal","name0","name1","name2","name3","playerCards0","playerCards1","playerCards2","playerCards3","undefined","PlayingDeck","botsCards","infoCards","showOwners","generateDeck","classCard","botHasCard","some","botCard","classes","infoCard","CardSelection","onClickCard","CARDS_PER_DECK","suffix","renderMessageSelection","PlayersNames","onClickButton","onChange","onChangeBotId","id","isBot","type","value","e","target","name","checked","App","React","horizontalSpace","setHorizontalSpace","expandDeck","setExpandDeck","setBotsCards","setNames","status","setStatus","setBotPlayerId","tableFlex","deckFlex","deckDisplayMode","isMobile","rel","href","size","isCardsSelection","CardsSelection","isPlayersNames","isPlay","Play","emptyHand","botsCardsDisplay","orderCards","playerCards","initializeInfoCards","classesDeck","classesContainer","integrity","data-cross-origin","cardRank","cardSuit","newBotsCards","filter","newNames","clone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f23ccf3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ten.7cd6623d.svg\";","module.exports = __webpack_public_path__ + \"static/media/ace.84eb4bcb.svg\";","module.exports = __webpack_public_path__ + \"static/media/king.57fb1946.svg\";","module.exports = __webpack_public_path__ + \"static/media/queen.4766bb27.svg\";","module.exports = __webpack_public_path__ + \"static/media/jack.74e09509.svg\";","module.exports = __webpack_public_path__ + \"static/media/nine.30540f54.svg\";","module.exports = __webpack_public_path__ + \"static/media/eight.0409b0e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven.89eee8f9.svg\";","module.exports = __webpack_public_path__ + \"static/media/ten.634ce432.svg\";","module.exports = __webpack_public_path__ + \"static/media/ace.173415a3.svg\";","module.exports = __webpack_public_path__ + \"static/media/king.737e7374.svg\";","module.exports = __webpack_public_path__ + \"static/media/queen.bf0c485b.svg\";","module.exports = __webpack_public_path__ + \"static/media/jack.8aa4016c.svg\";","module.exports = __webpack_public_path__ + \"static/media/nine.c36aadfd.svg\";","module.exports = __webpack_public_path__ + \"static/media/eight.0d8b1f2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven.a2fab26f.svg\";","module.exports = __webpack_public_path__ + \"static/media/ten.2ecc2371.svg\";","module.exports = __webpack_public_path__ + \"static/media/ace.c88cac08.svg\";","module.exports = __webpack_public_path__ + \"static/media/king.e9bee59f.svg\";","module.exports = __webpack_public_path__ + \"static/media/queen.0178738c.svg\";","module.exports = __webpack_public_path__ + \"static/media/jack.1aaf1fb9.svg\";","module.exports = __webpack_public_path__ + \"static/media/nine.f85a2d1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/eight.af7d286c.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven.d6062136.svg\";","module.exports = __webpack_public_path__ + \"static/media/ten.c48a2476.svg\";","module.exports = __webpack_public_path__ + \"static/media/ace.282551ef.svg\";","module.exports = __webpack_public_path__ + \"static/media/king.1c2a31e5.svg\";","module.exports = __webpack_public_path__ + \"static/media/queen.2b4b8711.svg\";","module.exports = __webpack_public_path__ + \"static/media/jack.4110bb36.svg\";","module.exports = __webpack_public_path__ + \"static/media/nine.e8bf3605.svg\";","module.exports = __webpack_public_path__ + \"static/media/eight.23e694f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven.57dc375f.svg\";","module.exports = __webpack_public_path__ + \"static/media/back.63f6b736.svg\";","export enum Status {\n  PlayersNames = 'players names',\n  CardsSelection = 'cards selection',\n  Play = 'play'\n}\n","import TenClubs from '../img/cards/clubs/ten.svg';\nimport AceClubs from '../img/cards/clubs/ace.svg';\nimport KingClubs from '../img/cards/clubs/king.svg';\nimport QueenClubs from '../img/cards/clubs/queen.svg';\nimport JackClubs from '../img/cards/clubs/jack.svg';\nimport NineClubs from '../img/cards/clubs/nine.svg';\nimport EightClubs from '../img/cards/clubs/eight.svg';\nimport SevenClubs from '../img/cards/clubs/seven.svg';\n\nimport TenDiamonds from '../img/cards/diamonds/ten.svg';\nimport AceDiamonds from '../img/cards/diamonds/ace.svg';\nimport KingDiamonds from '../img/cards/diamonds/king.svg';\nimport QueenDiamonds from '../img/cards/diamonds/queen.svg';\nimport JackDiamonds from '../img/cards/diamonds/jack.svg';\nimport NineDiamonds from '../img/cards/diamonds/nine.svg';\nimport EightDiamonds from '../img/cards/diamonds/eight.svg';\nimport SevenDiamonds from '../img/cards/diamonds/seven.svg';\n\nimport TenHearts from '../img/cards/hearts/ten.svg';\nimport AceHearts from '../img/cards/hearts/ace.svg';\nimport KingHearts from '../img/cards/hearts/king.svg';\nimport QueenHearts from '../img/cards/hearts/queen.svg';\nimport JackHearts from '../img/cards/hearts/jack.svg';\nimport NineHearts from '../img/cards/hearts/nine.svg';\nimport EightHearts from '../img/cards/hearts/eight.svg';\nimport SevenHearts from '../img/cards/hearts/seven.svg';\n\nimport TenSpades from '../img/cards/spades/ten.svg';\nimport AceSpades from '../img/cards/spades/ace.svg';\nimport KingSpades from '../img/cards/spades/king.svg';\nimport QueenSpades from '../img/cards/spades/queen.svg';\nimport JackSpades from '../img/cards/spades/jack.svg';\nimport NineSpades from '../img/cards/spades/nine.svg';\nimport EightSpades from '../img/cards/spades/eight.svg';\nimport SevenSpades from '../img/cards/spades/seven.svg';\n\nimport CardBack from '../img/cards/back.svg';\n\nimport { Card, CardRank, CardSuit } from 'manille/lib/types';\nimport { NUMBER_PLAYERS } from '../constants';\n\nconst getPlayerName = (names: string[], playerId: 0 | 1 | 2 | 3, botPlayerId: 0 | 1 | 2 | 3) => {\n  if (names.length !== NUMBER_PLAYERS) return '';\n\n  const isBot = playerId === botPlayerId;\n\n  if (!isBot) return names[playerId];\n\n  return `${names[playerId]} (you)`;\n};\n\nconst getPlayerSuffix = (playerId: 0 | 1 | 2 | 3) => {\n  const suffixes = ['top', 'right', 'bottom', 'left'];\n\n  return suffixes[playerId];\n};\n\nconst getCardLabelCommon = (card?: Card) => {\n  const cardLabel = card && card.rank && card.suit ? `${card.rank} ${card.suit}` : 'back';\n\n  return cardLabel;\n};\n\nconst getCardLabelDeck = (index: number, card?: Card) => {\n  const cardLabel = getCardLabelCommon(card);\n  const newCardLabel = `${cardLabel}:deck:${index}`;\n\n  return newCardLabel;\n};\n\nconst getCardLabel = (index: number, playerId: number, card?: Card) => {\n  const cardLabel = getCardLabelCommon(card);\n  const newCardLabel = `${cardLabel}:p-id${playerId}:${index}`;\n\n  return newCardLabel;\n};\n\nconst getCardImg = (card?: Card) => {\n  const { Ten, Ace, King, Queen, Jack, Nine, Eight, Seven } = CardRank;\n  const { Clubs, Diamonds, Hearts, Spades } = CardSuit;\n\n  if (!card) return CardBack;\n  const { rank, suit } = card;\n\n  switch (suit) {\n    case Clubs:\n      switch (rank) {\n        case Ten:\n          return TenClubs;\n\n        case Ace:\n          return AceClubs;\n\n        case King:\n          return KingClubs;\n\n        case Queen:\n          return QueenClubs;\n\n        case Jack:\n          return JackClubs;\n\n        case Nine:\n          return NineClubs;\n\n        case Eight:\n          return EightClubs;\n\n        case Seven:\n          return SevenClubs;\n      }\n\n    case Diamonds:\n      switch (rank) {\n        case Ten:\n          return TenDiamonds;\n\n        case Ace:\n          return AceDiamonds;\n\n        case King:\n          return KingDiamonds;\n\n        case Queen:\n          return QueenDiamonds;\n\n        case Jack:\n          return JackDiamonds;\n\n        case Nine:\n          return NineDiamonds;\n\n        case Eight:\n          return EightDiamonds;\n\n        case Seven:\n          return SevenDiamonds;\n      }\n\n    case Hearts:\n      switch (rank) {\n        case Ten:\n          return TenHearts;\n\n        case Ace:\n          return AceHearts;\n\n        case King:\n          return KingHearts;\n\n        case Queen:\n          return QueenHearts;\n\n        case Jack:\n          return JackHearts;\n\n        case Nine:\n          return NineHearts;\n\n        case Eight:\n          return EightHearts;\n\n        case Seven:\n          return SevenHearts;\n      }\n\n    case Spades:\n      switch (rank) {\n        case Ten:\n          return TenSpades;\n\n        case Ace:\n          return AceSpades;\n\n        case King:\n          return KingSpades;\n\n        case Queen:\n          return QueenSpades;\n\n        case Jack:\n          return JackSpades;\n\n        case Nine:\n          return NineSpades;\n\n        case Eight:\n          return EightSpades;\n\n        case Seven:\n          return SevenSpades;\n      }\n  }\n};\n\nexport { getCardLabel, getPlayerName, getCardLabelDeck, getCardImg, getPlayerSuffix };\n","export const CARDS_PER_DECK = 32;\nexport const NUMBER_PLAYERS = 4;\nexport const CARDS_PER_PLAYER = CARDS_PER_DECK / NUMBER_PLAYERS;\n","import * as React from 'react';\nimport { Card, CardRank, CardSuit } from 'manille/lib/types';\nimport { getCardImg } from '../utils';\nimport classnames from 'classnames';\n\nexport interface PlayingCardProps {\n  className?: string;\n  card?: Card;\n  onClick?: (cardRank?: CardRank, cardSuit?: CardSuit) => void;\n}\n\nconst PlayingCard: React.FC<PlayingCardProps> = (props) => {\n  const { card, className, onClick } = props;\n  const img = getCardImg(card);\n  const alt = card ? `${card.rank} of ${card.suit}` : 'Card back';\n  const rank = card?.rank;\n  const suit = card?.suit;\n  const classImg = classnames(`demo-card ${className}`);\n\n  return (\n    <img\n      className={classImg}\n      src={img}\n      alt={alt}\n      onClick={() => {\n        if (onClick) onClick(rank, suit);\n      }}\n    />\n  );\n};\n\nexport { PlayingCard };\n","import * as React from 'react';\nimport { Card } from 'manille/lib/types';\nimport { PlayingCard } from './PlayingCard';\nimport { getCardLabel } from '../utils';\n\nexport interface PlayingCardsProps {\n  className?: string;\n  cards: (Card | undefined)[];\n  displayMode?: 2 | 4 | 8;\n  playerId: 0 | 1 | 2 | 3;\n}\n\nconst PlayingCards: React.FC<PlayingCardsProps> = (props) => {\n  const { cards, displayMode, playerId } = props;\n\n  if (cards.length === 0) return null;\n\n  if (displayMode === 4) {\n    const [card0, card1, card2, card3, ...lastCards] = cards;\n    const firstCards = [card0, card1, card2, card3];\n    const displayCards = [firstCards, lastCards];\n\n    return (\n      <>\n        {displayCards.map((c, index: number) => {\n          return (\n            <div className=\"demo-cards\" key={index}>\n              {c.map((card: Card | undefined, index: number) => (\n                <PlayingCard card={card} className=\"width-four-cards\" key={getCardLabel(index, playerId, card)} />\n              ))}\n            </div>\n          );\n        })}\n      </>\n    );\n  } else if (displayMode === 2) {\n    const [card0, card1, card2, card3, card4, card5, ...lastCards] = cards;\n    const displayCards = [[card0, card1], [card2, card3], [card4, card5], lastCards];\n\n    return (\n      <>\n        {displayCards.map((c, index: number) => {\n          return (\n            <div className=\"demo-cards\" key={index}>\n              {c.map((card: Card | undefined, index: number) => (\n                <PlayingCard card={card} className=\"width-two-cards\" key={getCardLabel(index, playerId, card)} />\n              ))}\n            </div>\n          );\n        })}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"demo-cards\">\n      {cards.map((card: Card | undefined, index: number) => (\n        <PlayingCard card={card} className=\"width-eight-cards\" key={getCardLabel(index, playerId, card)} />\n      ))}\n    </div>\n  );\n};\n\nexport { PlayingCards };\n","import * as React from 'react';\nimport { Card } from 'manille/lib/types';\nimport { PlayingCard } from './PlayingCard';\nimport { NUMBER_PLAYERS } from '../constants';\n\nexport interface PlayingTableProps {\n  className?: string;\n  cards: (Card | undefined)[];\n}\n\nconst PlayingTable: React.FC<PlayingTableProps> = (props) => {\n  const { cards } = props;\n\n  if (cards.length !== NUMBER_PLAYERS) return null;\n\n  const [playerCard0, playerCard1, playerCard2, playerCard3] = cards;\n\n  return (\n    <div className=\"flex-one\">\n      <div className=\"demo-table demo-container\">\n        <div className=\"flex-one flex-center\">\n          <PlayingCard className=\"width-one-card\" />\n        </div>\n        <div className=\"flex-one\">\n          <div className=\"demo-container flex-column\">\n            <PlayingCard className=\"width-one-card\" />\n            <PlayingCard className=\"width-one-card\" />\n          </div>\n        </div>\n        <div className=\"flex-one flex-center\">\n          <PlayingCard className=\"width-one-card\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { PlayingTable };\n","import * as React from 'react';\nimport { Card } from 'manille/lib/types';\nimport { PlayingCards } from './PlayingCards';\nimport { PlayingTable } from './PlayingTable';\nimport { NUMBER_PLAYERS } from '../constants';\nimport { getPlayerName } from '../utils';\n\nexport interface PlayingSpaceProps {\n  className?: string;\n  cards: (Card | undefined)[][];\n  horizontal?: boolean;\n  names: string[];\n  botPlayerId: 0 | 1 | 2 | 3;\n}\n\nconst PlayingSpace: React.FC<PlayingSpaceProps> = (props) => {\n  const { botPlayerId, className, cards, horizontal = true, names } = props;\n\n  if (cards.length !== NUMBER_PLAYERS || names.length !== NUMBER_PLAYERS) return null;\n\n  const name0 = getPlayerName(names, 0, botPlayerId);\n  const name1 = getPlayerName(names, 1, botPlayerId);\n  const name2 = getPlayerName(names, 2, botPlayerId);\n  const name3 = getPlayerName(names, 3, botPlayerId);\n\n  const [playerCards0, playerCards1, playerCards2, playerCards3] = cards;\n\n  if (!horizontal) {\n    return (\n      <div className={className}>\n        <div className=\"demo-container\">\n          <div className=\"demo-player demo-player-left flex-one flex-center\">\n            <h3>{name3}</h3>\n            <PlayingCards cards={playerCards3} displayMode={2} playerId={3} />\n          </div>\n\n          <div className=\"demo-container flex-column flex-one\">\n            <div className=\"demo-player demo-player-top flex-one\">\n              <h3>{name0}</h3>\n              <PlayingCards cards={playerCards0} displayMode={4} playerId={0} />\n            </div>\n\n            <PlayingTable cards={[undefined, undefined, undefined, undefined]} />\n\n            <div className=\"demo-player demo-player-bottom flex-one\">\n              <h3>{name2}</h3>\n              <PlayingCards cards={playerCards2} displayMode={4} playerId={2} />\n            </div>\n          </div>\n          <div className=\"demo-player demo-player-right flex-one flex-center\">\n            <h3>{name1}</h3>\n            <PlayingCards cards={playerCards1} displayMode={2} playerId={1} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      <div className=\"demo-player demo-player-top\">\n        <h3>{name0}</h3>\n        <PlayingCards cards={playerCards0} playerId={0} />\n      </div>\n\n      <div className=\"demo-container\">\n        <div className=\"demo-player demo-player-left flex-one\">\n          <h3>{name3}</h3>\n          <PlayingCards cards={playerCards3} displayMode={4} playerId={3} />\n        </div>\n\n        <PlayingTable cards={[undefined, undefined, undefined, undefined]} />\n\n        <div className=\"demo-player demo-player-right flex-one\">\n          <h3>{name1}</h3>\n          <PlayingCards cards={playerCards1} displayMode={4} playerId={1} />\n        </div>\n      </div>\n      <div className=\"demo-player demo-player-bottom\">\n        <h3>{name2}</h3>\n        <PlayingCards cards={playerCards2} playerId={2} />\n      </div>\n    </div>\n  );\n};\n\nexport { PlayingSpace };\n","import * as React from 'react';\nimport { Card, CardRank, CardSuit } from 'manille/lib/types';\nimport { PlayingCard } from './PlayingCard';\nimport classnames from 'classnames';\nimport { getCardLabelDeck } from '../utils';\nimport { generateDeck } from 'manille/lib/cards';\nimport { NUMBER_PLAYERS } from '../constants';\n\nexport interface PlayingDeckProps {\n  botsCards: Card[];\n  infoCards?: Card[][];\n  className?: string;\n  displayMode?: 4 | 8;\n  showOwners?: boolean;\n  onClick?: (cardRank?: CardRank, cardSuit?: CardSuit) => void;\n}\n\nconst PlayingDeck: React.FC<PlayingDeckProps> = (props) => {\n  const { botsCards, displayMode = 8, infoCards, onClick, showOwners = false } = props;\n  const cards = generateDeck();\n\n  const classCard = displayMode === 8 ? 'width-eight-cards' : 'width-four-cards';\n\n  if (showOwners && (!infoCards || infoCards.length !== NUMBER_PLAYERS)) return null;\n\n  return (\n    <div className=\"demo-cards\">\n      {cards.map((card: Card, index: number) => {\n        // TODO: code function in manille package\n        const botHasCard = botsCards.some((botCard: Card) => card.rank === botCard.rank && card.suit === botCard.suit);\n\n        // TODO: factorize\n        const classes = classnames(classCard, {\n          'demo-card-used': botHasCard,\n          'demo-card-player-top':\n            showOwners &&\n            infoCards![0].some((infoCard: Card) => card.rank === infoCard.rank && card.suit === infoCard.suit),\n          'demo-card-player-right':\n            showOwners &&\n            infoCards![1].some((infoCard: Card) => card.rank === infoCard.rank && card.suit === infoCard.suit),\n          'demo-card-player-bottom':\n            showOwners &&\n            infoCards![2].some((infoCard: Card) => card.rank === infoCard.rank && card.suit === infoCard.suit),\n          'demo-card-player-left':\n            showOwners &&\n            infoCards![3].some((infoCard: Card) => card.rank === infoCard.rank && card.suit === infoCard.suit)\n        });\n\n        return <PlayingCard card={card} className={classes} key={getCardLabelDeck(index, card)} onClick={onClick} />;\n      })}\n    </div>\n  );\n};\n\nexport { PlayingDeck };\n","import * as React from 'react';\nimport { Card, CardRank, CardSuit } from 'manille/lib/types';\nimport { CARDS_PER_PLAYER } from '../constants';\nimport { generateDeck } from 'manille/lib/cards';\nimport { PlayingDeck } from './PlayingDeck';\n\nexport interface CardSelectionProps {\n  className?: string;\n  botsCards: Card[];\n  onClickCard: (cardRank?: CardRank, cardSuit?: CardSuit) => void;\n}\n\nconst CardSelection: React.FC<CardSelectionProps> = (props) => {\n  const { className, botsCards, onClickCard } = props;\n\n  const renderMessageSelection = () => {\n    if (botsCards.length === CARDS_PER_PLAYER) return null;\n\n    if (botsCards.length === 0) return <div>{`Please select your ${CARDS_PER_PLAYER} cards`}</div>;\n\n    const suffix = ` (${botsCards.length}/${CARDS_PER_PLAYER})`;\n\n    return <div>{`Please keep selecting cards ${suffix}`}</div>;\n  };\n\n  return (\n    <div className=\"demo-container\">\n      <div className=\"demo-cards\">\n        <h2>Your cards</h2>\n        {renderMessageSelection()}\n        <PlayingDeck botsCards={botsCards} onClick={onClickCard} />\n      </div>\n    </div>\n  );\n};\n\nexport { CardSelection };\n","import * as React from 'react';\nimport { Card, CardRank, CardSuit } from 'manille/lib/types';\nimport { CARDS_PER_PLAYER, NUMBER_PLAYERS } from '../constants';\nimport { generateDeck } from 'manille/lib/cards';\nimport { PlayingDeck } from './PlayingDeck';\nimport { getPlayerSuffix } from '../utils';\n\nexport interface PlayersNamesProps {\n  className?: string;\n  onClickButton: () => void;\n  onChange: (index: number, value: string) => void;\n  onChangeBotId: (index: 0 | 1 | 2 | 3) => void;\n  botPlayerId: 0 | 1 | 2 | 3;\n  names: string[];\n}\n\nconst PlayersNames: React.FC<PlayersNamesProps> = (props) => {\n  const { className, botPlayerId, onClickButton, onChange, onChangeBotId, names } = props;\n\n  if (names.length !== NUMBER_PLAYERS) return null;\n\n  // TODO: loop for 4\n  const allIds: (0 | 1 | 2 | 3)[] = [0, 1, 2, 3];\n  return (\n    <div className=\"demo-center\">\n      {allIds.map((id: 0 | 1 | 2 | 3) => {\n        const isBot = botPlayerId === id;\n\n        return (\n          <div className=\"demo-margin-y\" key={id}>\n            <input\n              className={`demo-player-${getPlayerSuffix(id)}`}\n              type=\"text\"\n              value={names[id]}\n              onChange={(e) => onChange(id, e.target.value)}\n            />\n            <input\n              className=\"demo-margin-left\"\n              type=\"radio\"\n              value=\"0\"\n              name=\"gender\"\n              checked={isBot}\n              onChange={() => onChangeBotId(id)}\n            />{' '}\n            Is myself\n          </div>\n        );\n      })}\n      <button onClick={onClickButton}>Next step</button>\n    </div>\n  );\n};\n\nexport { PlayersNames };\n","import * as React from 'react';\nimport { IoIosConstruct } from 'react-icons/io';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { isMobile } from 'react-device-detect';\n\nimport { Card, CardRank, CardSuit } from 'manille/lib/types';\nimport { initializeInfoCards } from 'manille/lib/ia';\nimport { orderCards } from 'manille/lib/cards';\n\nimport { PlayingSpace } from './components/PlayingSpace';\nimport { PlayingDeck } from './components/PlayingDeck';\nimport { CARDS_PER_PLAYER } from './constants';\n\nimport { Status } from './types';\nimport { CardSelection } from './components/CardSelection';\nimport classnames from 'classnames';\nimport { PlayersNames } from './components/PlayersNames';\n\n// TODO: import deeper\nimport { clone } from 'lodash';\n\nconst App = () => {\n  const [horizontalSpace, setHorizontalSpace] = React.useState(true);\n  const [expandDeck, setExpandDeck] = React.useState(true);\n  const [botsCards, setBotsCards] = React.useState<Card[]>([]);\n  const [names, setNames] = React.useState(['Player 1', 'Player 2', 'Player 3', 'Player 4']);\n  const [status, setStatus] = React.useState(Status.PlayersNames);\n  const [botPlayerId, setBotPlayerId] = React.useState<0 | 1 | 2 | 3>(2);\n\n  const tableFlex = expandDeck ? 'flex-three' : 'flex-two';\n  const deckFlex = expandDeck ? 'flex-two' : 'flex-one';\n  const deckDisplayMode = expandDeck ? 8 : 4;\n\n  if (isMobile) {\n    return (\n      <HelmetProvider>\n        <Helmet>\n          <title>Manille Demo</title>\n          <link rel=\"canonical\" href=\"https://sebranly.github.io/manille-demo\" />\n        </Helmet>\n        <div className=\"mobile\">\n          <h1>Manille Demo</h1>\n          <div>\n            We are working hard to make this website accessible on mobile. In the meantime, please visit it on a\n            computer instead. Thank you for your understanding!\n          </div>\n        </div>\n        <br />\n        <IoIosConstruct className=\"icon-mobile\" size=\"100px\" />\n      </HelmetProvider>\n    );\n  }\n\n  const isCardsSelection = status === Status.CardsSelection;\n  const isPlayersNames = status === Status.PlayersNames;\n  const isPlay = status === Status.Play;\n\n  const emptyHand = [undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined];\n  const botsCardsDisplay = orderCards(botsCards);\n  const playerCards: (Card | undefined)[][] = [emptyHand, emptyHand, emptyHand, emptyHand];\n  playerCards[botPlayerId] = botsCardsDisplay;\n\n  // TODO: rename from bots to bot\n  const infoCards: Card[][] = initializeInfoCards(botsCards, botPlayerId);\n\n  const onClickCardSelection = (cardRank?: CardRank, cardSuit?: CardSuit) => {\n    if (isCardsSelection) {\n      // TODO: code function in manille package\n      const hasCard = botsCards.some((card: Card) => card.rank === cardRank && card.suit === cardSuit);\n      if (hasCard) {\n        const newBotsCards = botsCards.filter((card: Card) => card.rank !== cardRank || card.suit !== cardSuit);\n\n        setBotsCards(newBotsCards);\n        if (newBotsCards.length === CARDS_PER_PLAYER) setStatus(Status.Play);\n      } else if (cardRank && cardSuit) {\n        const newBotsCards = [...botsCards, { rank: cardRank, suit: cardSuit }];\n        setBotsCards(newBotsCards);\n        if (newBotsCards.length === CARDS_PER_PLAYER) setStatus(Status.Play);\n      }\n    }\n  };\n\n  const onChangePlayersNames = (index: number, value: string) => {\n    const newNames = clone(names);\n    newNames[index] = value;\n\n    setNames(newNames);\n  };\n\n  const onChangeBotId = (index: 0 | 1 | 2 | 3) => setBotPlayerId(index);\n\n  const onClickPlayersNamesNextStep = () => setStatus(Status.CardsSelection);\n  const classesDeck = classnames('demo-cards', deckFlex);\n  const classesContainer = classnames('demo-container', { 'demo-center': isPlayersNames });\n\n  return (\n    <HelmetProvider>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n        integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n        data-cross-origin=\"anonymous\"\n      />\n      <Helmet>\n        <title>Manille Demo</title>\n        <link rel=\"canonical\" href=\"https://sebranly.github.io/manille-demo\" />\n      </Helmet>\n      <div className=\"main\">\n        <h1>Manille</h1>\n        {isPlay && (\n          <>\n            <button className=\"demo-button\" onClick={() => setHorizontalSpace(!horizontalSpace)}>\n              Change table layout\n            </button>\n            <button className=\"demo-button\" onClick={() => setExpandDeck(!expandDeck)}>\n              Change deck layout\n            </button>\n          </>\n        )}\n        <div className={classesContainer}>\n          {isPlay && (\n            <>\n              <PlayingSpace\n                botPlayerId={botPlayerId}\n                cards={playerCards}\n                className={`${tableFlex} demo-space`}\n                horizontal={horizontalSpace}\n                names={names}\n              />\n              <div className={classesDeck}>\n                <h2>All cards</h2>\n                <PlayingDeck\n                  botsCards={botsCards}\n                  displayMode={deckDisplayMode}\n                  infoCards={infoCards}\n                  showOwners={true}\n                />\n              </div>\n            </>\n          )}\n          {isCardsSelection && <CardSelection botsCards={botsCards} onClickCard={onClickCardSelection} />}\n          {isPlayersNames && (\n            <PlayersNames\n              botPlayerId={botPlayerId}\n              names={names}\n              onClickButton={onClickPlayersNamesNextStep}\n              onChange={onChangePlayersNames}\n              onChangeBotId={onChangeBotId}\n            />\n          )}\n        </div>\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}