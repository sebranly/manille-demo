{"version":3,"sources":["types.ts","utils/index.ts","constants.ts","components/PlayingCard.tsx","components/PlayingCards.tsx","components/PlayingTable.tsx","components/PlayerName.tsx","components/PlayingSpace.tsx","components/PlayingDeck.tsx","components/CardSelection.tsx","components/PlayersNames.tsx","components/TrumpSuitSelection.tsx","App.tsx","serviceWorker.ts","index.tsx","img/cards/clubs/ten.svg","img/cards/clubs/ace.svg","img/cards/clubs/king.svg","img/cards/clubs/queen.svg","img/cards/clubs/jack.svg","img/cards/clubs/nine.svg","img/cards/clubs/eight.svg","img/cards/clubs/seven.svg","img/cards/diamonds/ten.svg","img/cards/diamonds/ace.svg","img/cards/diamonds/king.svg","img/cards/diamonds/queen.svg","img/cards/diamonds/jack.svg","img/cards/diamonds/nine.svg","img/cards/diamonds/eight.svg","img/cards/diamonds/seven.svg","img/cards/hearts/ten.svg","img/cards/hearts/ace.svg","img/cards/hearts/king.svg","img/cards/hearts/queen.svg","img/cards/hearts/jack.svg","img/cards/hearts/nine.svg","img/cards/hearts/eight.svg","img/cards/hearts/seven.svg","img/cards/spades/ten.svg","img/cards/spades/ace.svg","img/cards/spades/king.svg","img/cards/spades/queen.svg","img/cards/spades/jack.svg","img/cards/spades/nine.svg","img/cards/spades/eight.svg","img/cards/spades/seven.svg","img/cards/back.svg"],"names":["Step","getPlayerName","names","playerId","botPlayerId","length","isBot","playerName","getPlayerSuffix","getCardLabelCommon","card","rank","suit","getCardLabelDeck","index","cardLabel","getCardLabel","PlayingCard","props","className","onClick","img","Ten","CardRank","Ace","King","Queen","Jack","Nine","Eight","Seven","Clubs","CardSuit","Diamonds","Hearts","Spades","CardBack","TenClubs","AceClubs","KingClubs","QueenClubs","JackClubs","NineClubs","EightClubs","SevenClubs","TenDiamonds","AceDiamonds","KingDiamonds","QueenDiamonds","JackDiamonds","NineDiamonds","EightDiamonds","SevenDiamonds","TenHearts","AceHearts","KingHearts","QueenHearts","JackHearts","NineHearts","EightHearts","SevenHearts","TenSpades","AceSpades","KingSpades","QueenSpades","JackSpades","NineSpades","EightSpades","SevenSpades","getCardImg","alt","classImg","classnames","src","PlayingCards","cards","displayMode","displayCards","map","c","key","PlayingTable","playerCard0","playerCard1","playerCard2","playerCard3","PlayerName","currentPlayerId","name","classes","PlayingSpace","startingPlayerId","playedCards","horizontal","playerCards0","playerCards1","playerCards2","playerCards3","cardsTable","undefined","i","getPlayerId","PlayingDeck","allPlayedCards","playerPlayedCards","botCards","infoCards","showOwners","generateDeck","classCard","botHasCard","hasCard","alreadyHasCard","CardSelection","onClickCard","CARDS_PER_DECK","suffix","renderMessageSelection","PlayersNames","onClickButton","onChange","onChangeBotId","id","type","value","e","target","checked","TrumpSuitSelection","trumpSuit","onChangeTrumpSuit","onChangeCurrentPlayerId","allSuits","labelSuit","App","React","horizontalSpace","setHorizontalSpace","expandDeck","setExpandDeck","setBotCards","setNames","step","setStep","setBotPlayerId","setTrumpSuit","setCurrentPlayerId","setStartingPlayerId","setAllPlayedCards","setPlayedCards","logs","setLogs","initializeInfoSuitHighest","infoSuitHighest","setInfoSuitHighest","initializeInfoCards","setInfoCards","setPlayerPlayedCards","remainingCards","setRemainingCards","tableFlex","deckFlex","deckDisplayMode","isMobile","rel","href","size","isCardsSelectionStep","CardsSelection","isPlayersNamesStep","isPlayStep","Play","isTrumpSuitStep","TrumpSuit","emptyHand","botCardsDisplay","orderCards","playerCards","knownCards","reverse","clone","unknownCardsLength","unknownCards","slice","cardsDisplay","classesDeck","classesContainer","integrity","data-cross-origin","cardRank","cardSuit","hasPlayedCard","infoCardsPlayer","canPlayCard","newPlayerPlayedCards","push","newRemainingCards","newAllPlayedCards","newPlayedCards","newInfoSuitHighest","updateInfoSuitHighest","newInfoCards","updateInfoCards","leaderId","getLeaderFold","points","getCardsPoints","newId","newBotCards","excludeCards","newNames","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.d8cb15b5.chunk.js","sourcesContent":["export enum Step {\n  PlayersNames = 'players names',\n  CardsSelection = 'cards selection',\n  TrumpSuit = 'trump suit',\n  Play = 'play'\n}\n","import TenClubs from '../img/cards/clubs/ten.svg';\nimport AceClubs from '../img/cards/clubs/ace.svg';\nimport KingClubs from '../img/cards/clubs/king.svg';\nimport QueenClubs from '../img/cards/clubs/queen.svg';\nimport JackClubs from '../img/cards/clubs/jack.svg';\nimport NineClubs from '../img/cards/clubs/nine.svg';\nimport EightClubs from '../img/cards/clubs/eight.svg';\nimport SevenClubs from '../img/cards/clubs/seven.svg';\n\nimport TenDiamonds from '../img/cards/diamonds/ten.svg';\nimport AceDiamonds from '../img/cards/diamonds/ace.svg';\nimport KingDiamonds from '../img/cards/diamonds/king.svg';\nimport QueenDiamonds from '../img/cards/diamonds/queen.svg';\nimport JackDiamonds from '../img/cards/diamonds/jack.svg';\nimport NineDiamonds from '../img/cards/diamonds/nine.svg';\nimport EightDiamonds from '../img/cards/diamonds/eight.svg';\nimport SevenDiamonds from '../img/cards/diamonds/seven.svg';\n\nimport TenHearts from '../img/cards/hearts/ten.svg';\nimport AceHearts from '../img/cards/hearts/ace.svg';\nimport KingHearts from '../img/cards/hearts/king.svg';\nimport QueenHearts from '../img/cards/hearts/queen.svg';\nimport JackHearts from '../img/cards/hearts/jack.svg';\nimport NineHearts from '../img/cards/hearts/nine.svg';\nimport EightHearts from '../img/cards/hearts/eight.svg';\nimport SevenHearts from '../img/cards/hearts/seven.svg';\n\nimport TenSpades from '../img/cards/spades/ten.svg';\nimport AceSpades from '../img/cards/spades/ace.svg';\nimport KingSpades from '../img/cards/spades/king.svg';\nimport QueenSpades from '../img/cards/spades/queen.svg';\nimport JackSpades from '../img/cards/spades/jack.svg';\nimport NineSpades from '../img/cards/spades/nine.svg';\nimport EightSpades from '../img/cards/spades/eight.svg';\nimport SevenSpades from '../img/cards/spades/seven.svg';\n\nimport CardBack from '../img/cards/back.svg';\n\nimport { Card, CardRank, CardSuit, PlayerId } from 'manille/lib/types';\nimport { NUMBER_PLAYERS } from '../constants';\n\nconst getPlayerName = (names: string[], playerId: PlayerId, botPlayerId: PlayerId) => {\n  if (names.length !== NUMBER_PLAYERS) return '';\n\n  const isBot = playerId === botPlayerId;\n\n  const playerName = names[playerId];\n\n  if (!isBot) return playerName;\n\n  return `${playerName} (you)`;\n};\n\nconst getPlayerSuffix = (playerId: PlayerId) => {\n  const suffixes = ['top', 'right', 'bottom', 'left'];\n\n  return suffixes[playerId];\n};\n\nconst getCardLabelCommon = (card?: Card) => {\n  const cardLabel = card && card.rank && card.suit ? `${card.rank} ${card.suit}` : 'back';\n\n  return cardLabel;\n};\n\nconst getCardLabelDeck = (index: number, card?: Card) => {\n  const cardLabel = getCardLabelCommon(card);\n  const newCardLabel = `${cardLabel}:deck:${index}`;\n\n  return newCardLabel;\n};\n\nconst getCardLabel = (index: number, playerId: PlayerId, card?: Card) => {\n  const cardLabel = getCardLabelCommon(card);\n  const newCardLabel = `${cardLabel}:p-id${playerId}:${index}`;\n\n  return newCardLabel;\n};\n\nconst getCardImg = (card?: Card) => {\n  const { Ten, Ace, King, Queen, Jack, Nine, Eight, Seven } = CardRank;\n  const { Clubs, Diamonds, Hearts, Spades } = CardSuit;\n\n  if (!card) return CardBack;\n  const { rank, suit } = card;\n\n  switch (suit) {\n    case Clubs:\n      switch (rank) {\n        case Ten:\n          return TenClubs;\n\n        case Ace:\n          return AceClubs;\n\n        case King:\n          return KingClubs;\n\n        case Queen:\n          return QueenClubs;\n\n        case Jack:\n          return JackClubs;\n\n        case Nine:\n          return NineClubs;\n\n        case Eight:\n          return EightClubs;\n\n        case Seven:\n          return SevenClubs;\n      }\n\n    case Diamonds:\n      switch (rank) {\n        case Ten:\n          return TenDiamonds;\n\n        case Ace:\n          return AceDiamonds;\n\n        case King:\n          return KingDiamonds;\n\n        case Queen:\n          return QueenDiamonds;\n\n        case Jack:\n          return JackDiamonds;\n\n        case Nine:\n          return NineDiamonds;\n\n        case Eight:\n          return EightDiamonds;\n\n        case Seven:\n          return SevenDiamonds;\n      }\n\n    case Hearts:\n      switch (rank) {\n        case Ten:\n          return TenHearts;\n\n        case Ace:\n          return AceHearts;\n\n        case King:\n          return KingHearts;\n\n        case Queen:\n          return QueenHearts;\n\n        case Jack:\n          return JackHearts;\n\n        case Nine:\n          return NineHearts;\n\n        case Eight:\n          return EightHearts;\n\n        case Seven:\n          return SevenHearts;\n      }\n\n    case Spades:\n      switch (rank) {\n        case Ten:\n          return TenSpades;\n\n        case Ace:\n          return AceSpades;\n\n        case King:\n          return KingSpades;\n\n        case Queen:\n          return QueenSpades;\n\n        case Jack:\n          return JackSpades;\n\n        case Nine:\n          return NineSpades;\n\n        case Eight:\n          return EightSpades;\n\n        case Seven:\n          return SevenSpades;\n      }\n  }\n};\n\nexport { getCardLabel, getPlayerName, getCardLabelDeck, getCardImg, getPlayerSuffix };\n","export const CARDS_PER_DECK = 32;\nexport const NUMBER_PLAYERS = 4;\nexport const CARDS_PER_PLAYER = CARDS_PER_DECK / NUMBER_PLAYERS;\n","import * as React from 'react';\nimport { Card, CardRank, CardSuit } from 'manille/lib/types';\nimport { getCardImg } from '../utils';\nimport classnames from 'classnames';\n\nexport interface PlayingCardProps {\n  className?: string;\n  card?: Card;\n  onClick?: (cardRank?: CardRank, cardSuit?: CardSuit) => void;\n}\n\nconst PlayingCard: React.FC<PlayingCardProps> = (props) => {\n  const { card, className, onClick } = props;\n  const img = getCardImg(card);\n  const alt = card ? `${card.rank} of ${card.suit}` : 'Card back';\n  const rank = card?.rank;\n  const suit = card?.suit;\n  const classImg = classnames(`demo-card ${className}`);\n\n  return (\n    <img\n      className={classImg}\n      src={img}\n      alt={alt}\n      onClick={() => {\n        if (onClick) onClick(rank, suit);\n      }}\n    />\n  );\n};\n\nexport { PlayingCard };\n","import * as React from 'react';\nimport { Card, PlayerId } from 'manille/lib/types';\nimport { PlayingCard } from './PlayingCard';\nimport { getCardLabel } from '../utils';\n\nexport interface PlayingCardsProps {\n  className?: string;\n  cards: (Card | undefined)[];\n  displayMode?: 2 | 4 | 8;\n  playerId: PlayerId;\n}\n\nconst PlayingCards: React.FC<PlayingCardsProps> = (props) => {\n  const { cards, displayMode, playerId } = props;\n\n  if (cards.length === 0) return null;\n\n  if (displayMode === 4) {\n    const [card0, card1, card2, card3, ...lastCards] = cards;\n    const firstCards = [card0, card1, card2, card3];\n    const displayCards = [firstCards, lastCards];\n\n    return (\n      <>\n        {displayCards.map((c, index: number) => {\n          return (\n            <div className=\"demo-cards\" key={index}>\n              {c.map((card: Card | undefined, index: number) => (\n                <PlayingCard card={card} className=\"width-four-cards\" key={getCardLabel(index, playerId, card)} />\n              ))}\n            </div>\n          );\n        })}\n      </>\n    );\n  } else if (displayMode === 2) {\n    const [card0, card1, card2, card3, card4, card5, ...lastCards] = cards;\n    const displayCards = [[card0, card1], [card2, card3], [card4, card5], lastCards];\n\n    return (\n      <>\n        {displayCards.map((c, index: number) => {\n          return (\n            <div className=\"demo-cards\" key={index}>\n              {c.map((card: Card | undefined, index: number) => (\n                <PlayingCard card={card} className=\"width-two-cards\" key={getCardLabel(index, playerId, card)} />\n              ))}\n            </div>\n          );\n        })}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"demo-cards\">\n      {cards.map((card: Card | undefined, index: number) => (\n        <PlayingCard card={card} className=\"width-eight-cards\" key={getCardLabel(index, playerId, card)} />\n      ))}\n    </div>\n  );\n};\n\nexport { PlayingCards };\n","import * as React from 'react';\nimport { Card } from 'manille/lib/types';\nimport { PlayingCard } from './PlayingCard';\nimport { NUMBER_PLAYERS } from '../constants';\n\nexport interface PlayingTableProps {\n  className?: string;\n  cards: (Card | undefined)[];\n}\n\nconst PlayingTable: React.FC<PlayingTableProps> = (props) => {\n  const { cards } = props;\n\n  if (cards.length !== NUMBER_PLAYERS) return null;\n\n  const [playerCard0, playerCard1, playerCard2, playerCard3] = cards;\n\n  return (\n    <div className=\"flex-one\">\n      <div className=\"demo-table demo-container\">\n        <div className=\"flex-one flex-center\">\n          <PlayingCard className=\"width-one-card\" card={playerCard3} />\n        </div>\n        <div className=\"flex-one\">\n          <div className=\"demo-container flex-column\">\n            <PlayingCard className=\"width-one-card\" card={playerCard0} />\n            <PlayingCard className=\"width-one-card\" card={playerCard2} />\n          </div>\n        </div>\n        <div className=\"flex-one flex-center\">\n          <PlayingCard className=\"width-one-card\" card={playerCard1} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { PlayingTable };\n","import * as React from 'react';\nimport { getPlayerName } from '../utils';\nimport classnames from 'classnames';\nimport { PlayerId } from 'manille/lib/types';\n\nexport interface PlayerNameProps {\n  className?: string;\n  names: string[];\n  botPlayerId: PlayerId;\n  currentPlayerId: PlayerId;\n  playerId: PlayerId;\n}\n\nconst PlayerName: React.FC<PlayerNameProps> = (props) => {\n  const { names, className, botPlayerId, currentPlayerId, playerId } = props;\n  const name = getPlayerName(names, playerId, botPlayerId);\n  const classes = classnames({ 'demo-current-player': playerId === currentPlayerId });\n\n  return <h3 className={classes}>{name}</h3>;\n};\n\nexport { PlayerName };\n","import * as React from 'react';\nimport { Card, PlayerId } from 'manille/lib/types';\nimport { PlayingCards } from './PlayingCards';\nimport { PlayingTable } from './PlayingTable';\nimport { NUMBER_PLAYERS } from '../constants';\nimport { PlayerName } from './PlayerName';\nimport { getPlayerId } from 'manille/lib/game';\n\nexport interface PlayingSpaceProps {\n  className?: string;\n  cards: (Card | undefined)[][];\n  horizontal?: boolean;\n  names: string[];\n  botPlayerId: PlayerId;\n  currentPlayerId: PlayerId;\n  startingPlayerId: PlayerId;\n  playedCards: Card[];\n}\n\nconst PlayingSpace: React.FC<PlayingSpaceProps> = (props) => {\n  const {\n    botPlayerId,\n    startingPlayerId,\n    className,\n    cards,\n    playedCards,\n    horizontal = true,\n    currentPlayerId,\n    names\n  } = props;\n\n  if (cards.length !== NUMBER_PLAYERS || names.length !== NUMBER_PLAYERS) return null;\n\n  const [playerCards0, playerCards1, playerCards2, playerCards3] = cards;\n\n  const cardsTable: (Card | undefined)[] = [undefined, undefined, undefined, undefined];\n  for (let i = 0; i < playedCards.length; i++) {\n    const id = getPlayerId(startingPlayerId, i);\n    cardsTable[id] = playedCards[i];\n  }\n\n  if (!horizontal) {\n    return (\n      <div className={className}>\n        <div className=\"demo-container\">\n          <div className=\"demo-player demo-player-left flex-one flex-center\">\n            <PlayerName names={names} playerId={3} currentPlayerId={currentPlayerId} botPlayerId={botPlayerId} />\n            <PlayingCards cards={playerCards3} displayMode={2} playerId={3} />\n          </div>\n\n          <div className=\"demo-container flex-column flex-one\">\n            <div className=\"demo-player demo-player-top flex-one\">\n              <PlayerName names={names} playerId={0} currentPlayerId={currentPlayerId} botPlayerId={botPlayerId} />\n              <PlayingCards cards={playerCards0} displayMode={4} playerId={0} />\n            </div>\n\n            <PlayingTable cards={cardsTable} />\n\n            <div className=\"demo-player demo-player-bottom flex-one\">\n              <PlayerName names={names} playerId={2} currentPlayerId={currentPlayerId} botPlayerId={botPlayerId} />\n              <PlayingCards cards={playerCards2} displayMode={4} playerId={2} />\n            </div>\n          </div>\n          <div className=\"demo-player demo-player-right flex-one flex-center\">\n            <PlayerName names={names} playerId={1} currentPlayerId={currentPlayerId} botPlayerId={botPlayerId} />\n            <PlayingCards cards={playerCards1} displayMode={2} playerId={1} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      <div className=\"demo-player demo-player-top\">\n        <PlayerName names={names} playerId={0} currentPlayerId={currentPlayerId} botPlayerId={botPlayerId} />\n        <PlayingCards cards={playerCards0} playerId={0} />\n      </div>\n\n      <div className=\"demo-container\">\n        <div className=\"demo-player demo-player-left flex-one\">\n          <PlayerName names={names} playerId={3} currentPlayerId={currentPlayerId} botPlayerId={botPlayerId} />\n          <PlayingCards cards={playerCards3} displayMode={4} playerId={3} />\n        </div>\n\n        <PlayingTable cards={cardsTable} />\n\n        <div className=\"demo-player demo-player-right flex-one\">\n          <PlayerName names={names} playerId={1} currentPlayerId={currentPlayerId} botPlayerId={botPlayerId} />\n          <PlayingCards cards={playerCards1} displayMode={4} playerId={1} />\n        </div>\n      </div>\n      <div className=\"demo-player demo-player-bottom\">\n        <PlayerName names={names} playerId={2} currentPlayerId={currentPlayerId} botPlayerId={botPlayerId} />\n        <PlayingCards cards={playerCards2} playerId={2} />\n      </div>\n    </div>\n  );\n};\n\nexport { PlayingSpace };\n","import * as React from 'react';\nimport { Card, CardRank, CardSuit } from 'manille/lib/types';\nimport { PlayingCard } from './PlayingCard';\nimport classnames from 'classnames';\nimport { getCardLabelDeck } from '../utils';\nimport { hasCard, generateDeck } from 'manille/lib/cards';\nimport { NUMBER_PLAYERS } from '../constants';\n\nexport interface PlayingDeckProps {\n  botCards: Card[];\n  allPlayedCards?: Card[];\n  infoCards?: Card[][];\n  playerPlayedCards?: Card[][];\n  className?: string;\n  displayMode?: 4 | 8;\n  showOwners?: boolean;\n  onClick?: (cardRank?: CardRank, cardSuit?: CardSuit) => void;\n}\n\nconst PlayingDeck: React.FC<PlayingDeckProps> = (props) => {\n  const {\n    allPlayedCards,\n    playerPlayedCards,\n    botCards,\n    displayMode = 8,\n    infoCards,\n    onClick,\n    showOwners = false\n  } = props;\n  const cards = generateDeck();\n\n  const classCard = displayMode === 8 ? 'width-eight-cards' : 'width-four-cards';\n\n  if (showOwners && infoCards?.length !== NUMBER_PLAYERS) return null;\n\n  return (\n    <div className=\"demo-cards\">\n      {cards.map((card: Card, index: number) => {\n        const botHasCard = hasCard(botCards, card);\n        const alreadyHasCard = allPlayedCards && hasCard(allPlayedCards, card);\n\n        // TODO: factorize?\n        const classes = classnames(classCard, {\n          'demo-card-used': (!showOwners && botHasCard) || (showOwners && alreadyHasCard),\n          'demo-card-player-top': showOwners && (hasCard(infoCards![0], card) || hasCard(playerPlayedCards![0], card)),\n          'demo-card-player-right':\n            showOwners && (hasCard(infoCards![1], card) || hasCard(playerPlayedCards![1], card)),\n          'demo-card-player-bottom':\n            showOwners && (hasCard(infoCards![2], card) || hasCard(playerPlayedCards![2], card)),\n          'demo-card-player-left': showOwners && (hasCard(infoCards![3], card) || hasCard(playerPlayedCards![3], card))\n        });\n\n        return <PlayingCard card={card} className={classes} key={getCardLabelDeck(index, card)} onClick={onClick} />;\n      })}\n    </div>\n  );\n};\n\nexport { PlayingDeck };\n","import * as React from 'react';\nimport { Card, CardRank, CardSuit } from 'manille/lib/types';\nimport { CARDS_PER_PLAYER } from '../constants';\nimport { PlayingDeck } from './PlayingDeck';\n\nexport interface CardSelectionProps {\n  className?: string;\n  botCards: Card[];\n  onClickCard: (cardRank?: CardRank, cardSuit?: CardSuit) => void;\n}\n\nconst CardSelection: React.FC<CardSelectionProps> = (props) => {\n  const { className, botCards, onClickCard } = props;\n\n  const renderMessageSelection = () => {\n    if (botCards.length === CARDS_PER_PLAYER) return null;\n\n    if (botCards.length === 0) return <div>{`Please select your ${CARDS_PER_PLAYER} cards`}</div>;\n\n    const suffix = ` (${botCards.length}/${CARDS_PER_PLAYER})`;\n\n    return <div>{`Please keep selecting cards ${suffix}`}</div>;\n  };\n\n  return (\n    <div className=\"demo-container\">\n      <div className=\"demo-cards\">\n        <h2>Your cards</h2>\n        {renderMessageSelection()}\n        <PlayingDeck botCards={botCards} onClick={onClickCard} />\n      </div>\n    </div>\n  );\n};\n\nexport { CardSelection };\n","import { PlayerId } from 'manille/lib/types';\nimport * as React from 'react';\nimport { NUMBER_PLAYERS } from '../constants';\nimport { getPlayerSuffix } from '../utils';\n\nexport interface PlayersNamesProps {\n  className?: string;\n  onClickButton: () => void;\n  onChange: (index: PlayerId, value: string) => void;\n  onChangeBotId: (index: PlayerId) => void;\n  botPlayerId: PlayerId;\n  names: string[];\n}\n\nconst PlayersNames: React.FC<PlayersNamesProps> = (props) => {\n  const { className, botPlayerId, onClickButton, onChange, onChangeBotId, names } = props;\n\n  if (names.length !== NUMBER_PLAYERS) return null;\n\n  // TODO: loop for 4\n  const allIds: PlayerId[] = [0, 1, 2, 3];\n  return (\n    <div className=\"demo-center\">\n      {allIds.map((id: PlayerId) => {\n        const isBot = botPlayerId === id;\n\n        return (\n          <div className=\"demo-margin-y\" key={id}>\n            <input\n              className={`demo-player-${getPlayerSuffix(id)}`}\n              type=\"text\"\n              value={names[id]}\n              onChange={(e) => onChange(id, e.target.value)}\n            />\n            <input\n              className=\"demo-margin-left\"\n              type=\"radio\"\n              value={`${id}`}\n              name=\"\"\n              checked={isBot}\n              onChange={() => onChangeBotId(id)}\n            />{' '}\n            Is myself\n          </div>\n        );\n      })}\n      <button onClick={onClickButton}>Next step</button>\n    </div>\n  );\n};\n\nexport { PlayersNames };\n","import { CardSuit, PlayerId } from 'manille/lib/types';\nimport * as React from 'react';\nimport { NUMBER_PLAYERS } from '../constants';\nimport { getPlayerName, getPlayerSuffix } from '../utils';\n\nexport interface TrumpSuitSelectionProps {\n  className?: string;\n  onClickButton: () => void;\n  onChangeTrumpSuit: (suit: CardSuit | false) => void;\n  onChangeCurrentPlayerId: (index: PlayerId) => void;\n  botPlayerId: PlayerId;\n  names: string[];\n  currentPlayerId: PlayerId;\n  trumpSuit: CardSuit | false;\n}\n\nconst TrumpSuitSelection: React.FC<TrumpSuitSelectionProps> = (props) => {\n  const {\n    className,\n    trumpSuit,\n    currentPlayerId,\n    botPlayerId,\n    onClickButton,\n    names,\n    onChangeTrumpSuit,\n    onChangeCurrentPlayerId\n  } = props;\n\n  const { Clubs, Diamonds, Hearts, Spades } = CardSuit;\n\n  if (names.length !== NUMBER_PLAYERS) return null;\n\n  // TODO: loop for 4\n  const allIds: PlayerId[] = [0, 1, 2, 3];\n  const allSuits: (CardSuit | false)[] = [Clubs, Diamonds, Hearts, Spades, false];\n\n  return (\n    <>\n      <div className=\"demo-container demo-half-width margin-auto\">\n        <div className=\"flex-one margin-auto text-align-left\">\n          <h2>Starting player</h2>\n          {allIds.map((id: PlayerId) => {\n            return (\n              <div\n                className={`demo-padding-left demo-margin-y demo-margin-x min demo-player-${getPlayerSuffix(id)}`}\n                key={id}\n              >\n                <input\n                  type=\"radio\"\n                  checked={currentPlayerId === id}\n                  value=\"0\"\n                  name=\"currentPlayerId\"\n                  onChange={() => onChangeCurrentPlayerId(id)}\n                />{' '}\n                {getPlayerName(names, id, botPlayerId)}\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"flex-one margin-auto text-align-left\">\n          <h2>Trump suit</h2>\n          {allSuits.map((suit: CardSuit | false) => {\n            const labelSuit = suit || 'no-trump-suit';\n            return (\n              <div className={`demo-padding-left demo-margin-y demo-margin-x demo-suit-${labelSuit}`} key={labelSuit}>\n                <input\n                  type=\"radio\"\n                  checked={trumpSuit === suit}\n                  value=\"0\"\n                  name=\"trumpSuit\"\n                  onChange={() => onChangeTrumpSuit(suit)}\n                />{' '}\n                {suit || 'En voiture (no trump suit)'}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <button onClick={onClickButton}>Next step</button>\n    </>\n  );\n};\n\nexport { TrumpSuitSelection };\n","import * as React from 'react';\nimport { IoIosConstruct } from 'react-icons/io';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { isMobile } from 'react-device-detect';\n\nimport { Card, CardRank, CardSuit, InfoSuitHighest, PlayerId } from 'manille/lib/types';\nimport { getCardsPoints } from 'manille/lib/scores';\nimport { initializeInfoCards, initializeInfoSuitHighest, updateInfoCards, updateInfoSuitHighest } from 'manille/lib/ia';\nimport { excludeCards, hasCard, orderCards } from 'manille/lib/cards';\nimport { getLeaderFold, getPlayerId } from 'manille/lib/game';\n\nimport { PlayingSpace } from './components/PlayingSpace';\nimport { PlayingDeck } from './components/PlayingDeck';\nimport { CARDS_PER_PLAYER, NUMBER_PLAYERS } from './constants';\n\nimport { Step } from './types';\nimport { CardSelection } from './components/CardSelection';\nimport classnames from 'classnames';\nimport { PlayersNames } from './components/PlayersNames';\n\nimport clone from 'lodash/clone';\nimport reverse from 'lodash/reverse';\nimport { TrumpSuitSelection } from './components/TrumpSuitSelection';\nimport { getPlayerName } from './utils';\n\nconst App = () => {\n  const [horizontalSpace, setHorizontalSpace] = React.useState(true);\n  const [expandDeck, setExpandDeck] = React.useState(true);\n  const [botCards, setBotCards] = React.useState<Card[]>([]);\n  const [names, setNames] = React.useState(['Player 1', 'Player 2', 'Player 3', 'Player 4']);\n  const [step, setStep] = React.useState(Step.PlayersNames);\n  const [botPlayerId, setBotPlayerId] = React.useState<PlayerId>(2);\n  const [trumpSuit, setTrumpSuit] = React.useState<false | CardSuit>(false);\n  const [currentPlayerId, setCurrentPlayerId] = React.useState<PlayerId>(0);\n  const [startingPlayerId, setStartingPlayerId] = React.useState<PlayerId>(0);\n  const [allPlayedCards, setAllPlayedCards] = React.useState<Card[]>([]);\n  const [playedCards, setPlayedCards] = React.useState<Card[]>([]);\n  const [logs, setLogs] = React.useState<string[]>(['DEBUG LOGS', 'Beginning of game']);\n  const [infoSuitHighest, setInfoSuitHighest] = React.useState<InfoSuitHighest[]>(initializeInfoSuitHighest());\n  const [infoCards, setInfoCards] = React.useState<Card[][]>(initializeInfoCards(botCards, botPlayerId));\n\n  // TODO: name is awful and redundant. Use playedBy and playedAt from Card instead.\n  const [playerPlayedCards, setPlayerPlayedCards] = React.useState<Card[][]>([[], [], [], []]);\n  const [remainingCards, setRemainingCards] = React.useState<number[]>([\n    CARDS_PER_PLAYER,\n    CARDS_PER_PLAYER,\n    CARDS_PER_PLAYER,\n    CARDS_PER_PLAYER\n  ]);\n\n  React.useEffect(() => {\n    setInfoCards(initializeInfoCards(botCards, botPlayerId));\n  }, [botCards, botPlayerId]);\n\n  const tableFlex = expandDeck ? 'flex-three' : 'flex-two';\n  const deckFlex = expandDeck ? 'flex-two' : 'flex-one';\n  const deckDisplayMode = expandDeck ? 8 : 4;\n\n  if (isMobile) {\n    return (\n      <HelmetProvider>\n        <Helmet>\n          <title>Manille Demo</title>\n          <link rel=\"canonical\" href=\"https://sebranly.github.io/manille-demo\" />\n        </Helmet>\n        <div className=\"mobile\">\n          <h1>Manille Demo</h1>\n          <div>\n            We are working hard to make this website accessible on mobile. In the meantime, please visit it on a\n            computer instead. Thank you for your understanding!\n          </div>\n        </div>\n        <br />\n        <IoIosConstruct className=\"icon-mobile\" size=\"100px\" />\n      </HelmetProvider>\n    );\n  }\n\n  const isCardsSelectionStep = step === Step.CardsSelection;\n  const isPlayersNamesStep = step === Step.PlayersNames;\n  const isPlayStep = step === Step.Play;\n  const isTrumpSuitStep = step === Step.TrumpSuit;\n\n  const emptyHand = [undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined];\n  const botCardsDisplay = orderCards(botCards);\n  const playerCards: (Card | undefined)[][] = [emptyHand, emptyHand, emptyHand, emptyHand];\n\n  for (let i = 0; i < NUMBER_PLAYERS; i++) {\n    if (i === botPlayerId) playerCards[i] = botCardsDisplay;\n    else {\n      const knownCards = reverse(clone(playerPlayedCards[i]));\n      const unknownCardsLength = CARDS_PER_PLAYER - knownCards.length;\n      const unknownCards = emptyHand.slice(0, unknownCardsLength);\n      const cardsDisplay = [...unknownCards, ...knownCards];\n\n      playerCards[i] = cardsDisplay;\n    }\n  }\n\n  const onClickCardSelection = (cardRank?: CardRank, cardSuit?: CardSuit) => {\n    if (isCardsSelectionStep && cardRank && cardSuit) {\n      const card: Card = { rank: cardRank, suit: cardSuit };\n      const botHasCard = hasCard(botCards, card);\n      const newBotCards = botHasCard ? excludeCards(botCards, [card]) : [...botCards, card];\n\n      setBotCards(newBotCards);\n\n      if (newBotCards.length === CARDS_PER_PLAYER) setStep(Step.TrumpSuit);\n    }\n  };\n\n  const onClickCardPlay = (cardRank?: CardRank, cardSuit?: CardSuit) => {\n    if (cardRank && cardSuit) {\n      const card: Card = { rank: cardRank, suit: cardSuit };\n      const hasPlayedCard = hasCard(allPlayedCards, card);\n      const infoCardsPlayer = infoCards[currentPlayerId];\n      const canPlayCard = hasCard(infoCardsPlayer, card);\n\n      // TODO: use getPlayableCards and have clear UI\n\n      if (!hasPlayedCard && canPlayCard) {\n        const newPlayerPlayedCards = clone(playerPlayedCards);\n        newPlayerPlayedCards[currentPlayerId].push(card);\n        setPlayerPlayedCards(newPlayerPlayedCards);\n\n        const newRemainingCards = clone(remainingCards);\n        newRemainingCards[currentPlayerId]--;\n        setRemainingCards(newRemainingCards);\n\n        const newAllPlayedCards = [...allPlayedCards, card];\n        setAllPlayedCards(newAllPlayedCards);\n\n        const newPlayedCards = [...playedCards, card];\n        const newInfoSuitHighest = updateInfoSuitHighest(infoSuitHighest, newPlayedCards, startingPlayerId, trumpSuit);\n        setInfoSuitHighest(newInfoSuitHighest);\n\n        // TODO: length should be calculated through manille\n        const newInfoCards = updateInfoCards(\n          newInfoSuitHighest,\n          infoCards,\n          allPlayedCards,\n          botPlayerId,\n          newRemainingCards\n        );\n\n        setInfoCards(newInfoCards);\n\n        if (newPlayedCards.length === NUMBER_PLAYERS) {\n          const leaderId = getLeaderFold(newPlayedCards, startingPlayerId, trumpSuit);\n\n          if (leaderId !== -1) {\n            setStartingPlayerId(leaderId);\n            setCurrentPlayerId(leaderId);\n            const points = getCardsPoints(newPlayedCards);\n            setLogs([...logs, `${getPlayerName(names, leaderId, botPlayerId)} scored ${points} points`]);\n\n            // TODO: find a way to show last card being played for a few ms?\n            setPlayedCards([]);\n          }\n        } else {\n          const newId = getPlayerId(currentPlayerId, 1);\n          setCurrentPlayerId(newId);\n          setPlayedCards(newPlayedCards);\n        }\n      }\n    }\n  };\n\n  const onChangePlayersNames = (index: PlayerId, value: string) => {\n    const newNames = clone(names);\n    newNames[index] = value;\n\n    setNames(newNames);\n  };\n\n  const onChangeBotId = (index: PlayerId) => setBotPlayerId(index);\n  // TODO: change name to starting\n  const onChangeCurrentPlayerId = (index: PlayerId) => {\n    setCurrentPlayerId(index);\n    setStartingPlayerId(index);\n  };\n\n  const onChangeTrumpSuit = (suit: CardSuit | false) => setTrumpSuit(suit);\n\n  const onClickPlayersNamesNextStep = () => setStep(Step.CardsSelection);\n  const onClickTrumpSuitSelectionNext = () => setStep(Step.Play);\n  const classesDeck = classnames('demo-cards', deckFlex);\n  const classesContainer = classnames('demo-container', { 'demo-center': isPlayersNamesStep });\n\n  return (\n    <HelmetProvider>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n        integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n        data-cross-origin=\"anonymous\"\n      />\n      <Helmet>\n        <title>Manille Demo</title>\n        <link rel=\"canonical\" href=\"https://sebranly.github.io/manille-demo\" />\n      </Helmet>\n      <div className=\"main\">\n        <h1>Manille</h1>\n        {isPlayStep && (\n          <>\n            <button className=\"demo-button\" onClick={() => setHorizontalSpace(!horizontalSpace)}>\n              Change table layout\n            </button>\n            <button className=\"demo-button\" onClick={() => setExpandDeck(!expandDeck)}>\n              Change deck layout\n            </button>\n          </>\n        )}\n        <div className={classesContainer}>\n          {isPlayStep && (\n            <>\n              <PlayingSpace\n                botPlayerId={botPlayerId}\n                currentPlayerId={currentPlayerId}\n                startingPlayerId={startingPlayerId}\n                playedCards={playedCards}\n                cards={playerCards}\n                className={`${tableFlex} demo-space`}\n                horizontal={horizontalSpace}\n                names={names}\n              />\n              <div className={classesDeck}>\n                <h2>All cards</h2>\n                <PlayingDeck\n                  botCards={botCards}\n                  displayMode={deckDisplayMode}\n                  infoCards={infoCards}\n                  showOwners={true}\n                  onClick={onClickCardPlay}\n                  allPlayedCards={allPlayedCards}\n                  playerPlayedCards={playerPlayedCards}\n                />\n              </div>\n            </>\n          )}\n          {isCardsSelectionStep && <CardSelection botCards={botCards} onClickCard={onClickCardSelection} />}\n          {isPlayersNamesStep && (\n            <PlayersNames\n              botPlayerId={botPlayerId}\n              names={names}\n              onClickButton={onClickPlayersNamesNextStep}\n              onChange={onChangePlayersNames}\n              onChangeBotId={onChangeBotId}\n            />\n          )}\n        </div>{' '}\n        <div>\n          {isPlayStep &&\n            logs.map((log: string, index: number) => {\n              return (\n                <div className=\"\" key={index}>\n                  {log}\n                </div>\n              );\n            })}\n        </div>\n        {isTrumpSuitStep && (\n          <TrumpSuitSelection\n            botPlayerId={botPlayerId}\n            names={names}\n            currentPlayerId={currentPlayerId}\n            trumpSuit={trumpSuit}\n            onClickButton={onClickTrumpSuitSelectionNext}\n            onChangeCurrentPlayerId={onChangeCurrentPlayerId}\n            onChangeTrumpSuit={onChangeTrumpSuit}\n          />\n        )}\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/ten.7cd6623d.svg\";","module.exports = __webpack_public_path__ + \"static/media/ace.84eb4bcb.svg\";","module.exports = __webpack_public_path__ + \"static/media/king.57fb1946.svg\";","module.exports = __webpack_public_path__ + \"static/media/queen.4766bb27.svg\";","module.exports = __webpack_public_path__ + \"static/media/jack.74e09509.svg\";","module.exports = __webpack_public_path__ + \"static/media/nine.30540f54.svg\";","module.exports = __webpack_public_path__ + \"static/media/eight.0409b0e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven.89eee8f9.svg\";","module.exports = __webpack_public_path__ + \"static/media/ten.634ce432.svg\";","module.exports = __webpack_public_path__ + \"static/media/ace.173415a3.svg\";","module.exports = __webpack_public_path__ + \"static/media/king.737e7374.svg\";","module.exports = __webpack_public_path__ + \"static/media/queen.bf0c485b.svg\";","module.exports = __webpack_public_path__ + \"static/media/jack.8aa4016c.svg\";","module.exports = __webpack_public_path__ + \"static/media/nine.c36aadfd.svg\";","module.exports = __webpack_public_path__ + \"static/media/eight.0d8b1f2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven.a2fab26f.svg\";","module.exports = __webpack_public_path__ + \"static/media/ten.2ecc2371.svg\";","module.exports = __webpack_public_path__ + \"static/media/ace.c88cac08.svg\";","module.exports = __webpack_public_path__ + \"static/media/king.e9bee59f.svg\";","module.exports = __webpack_public_path__ + \"static/media/queen.0178738c.svg\";","module.exports = __webpack_public_path__ + \"static/media/jack.1aaf1fb9.svg\";","module.exports = __webpack_public_path__ + \"static/media/nine.f85a2d1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/eight.af7d286c.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven.d6062136.svg\";","module.exports = __webpack_public_path__ + \"static/media/ten.c48a2476.svg\";","module.exports = __webpack_public_path__ + \"static/media/ace.282551ef.svg\";","module.exports = __webpack_public_path__ + \"static/media/king.1c2a31e5.svg\";","module.exports = __webpack_public_path__ + \"static/media/queen.2b4b8711.svg\";","module.exports = __webpack_public_path__ + \"static/media/jack.4110bb36.svg\";","module.exports = __webpack_public_path__ + \"static/media/nine.e8bf3605.svg\";","module.exports = __webpack_public_path__ + \"static/media/eight.23e694f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven.57dc375f.svg\";","module.exports = __webpack_public_path__ + \"static/media/back.63f6b736.svg\";"],"sourceRoot":""}